{"tagline":"a JavaScript library for working with BNF grammars","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"prettybnf","body":"prettybnf\r\n=========\r\n\r\na JavaScript library for working with BNF grammars\r\n\r\nAbout\r\n-----\r\n\r\n`prettybnf` provides a parser for Backus-Naur Form grammars and a stringifier\r\nfor pretty-printing BNF abstract syntax trees.  It uses the traditional BNF\r\nsyntax as opposed to `yacc` syntax.\r\n\r\nGetting Started\r\n---------------\r\n\r\nYou can use `prettybnf` both in Node.js apps and in modern browsers.  Only\r\nbrowsers that implement ECMAScript 5.1 with strict mode are supported.  This\r\nincludes Chrome 13+, Firefox 4+, Safari 5.1+, IE 10+, and Opera 12+\r\n([source](http://kangax.github.com/es5-compat-table)).\r\n\r\nTo get the library:\r\n\r\n- in a Node.js app using `npm`: do `npm install prettybnf` and add\r\n  `var prettybnf = require('prettybnf')` to your scripts.\r\n- in a Node.js app, manually: put `prettybnf.js` somewhere and add\r\n  `var prettybnf = require('./path/to/prettybnf.js')` to your scripts.\r\n- in a browser app: put `prettybnf.js` somewhere and add the usual\r\n  `<script src=\"path/to/prettybnf.js\"></script>` tag to your HTML.  This will\r\n  create a global object named `prettybnf`.\r\n\r\nIf you're not using `npm` you can download the latest version of `prettybnf.js`\r\nfrom GitHub [here](https://github.com/dhconnelly/prettybnf/downloads).\r\n\r\nUsage\r\n-----\r\n\r\nThere are four top-level exports on the `prettybnf` object:\r\n\r\n- `prettybnf.version`: string defining your version of the library\r\n- `prettybnf.parse(grammar)`: parses a BNF string and returns the AST\r\n- `prettybnf.stringify(ast)`: serializes an AST to a BNF string\r\n- `prettybnf.Parser(grammar)`: internals of the parser for testing and hacking\r\n\r\nThe BNF syntax recognized by the parser is defined in the file `prettybnf.bnf`,\r\nwhich is itself written in BNF.\r\n\r\nThe parser constructs an AST, composed of AST nodes, from a grammar.  Each node\r\nis an object with a `type` property that specifies the type of node and other\r\nrelevant properties.  The five node types are as follows:\r\n\r\n    { type:        (String) 'grammar',\r\n      productions: (Array) list of productions         }\r\n\r\n    { type:        (String) 'production',\r\n      lhs:         (Object) a nonterminal node,\r\n      rhs:         (Array) list of expressions         }\r\n\r\n    { type:        (String) 'expression',\r\n      terms:       (Array) terminals and nonterminals  }\r\n\r\n    { type:        (String) 'nonterminal',\r\n      text:        (String) the nonterminal name       }\r\n\r\n    { type:        (String) 'terminal',\r\n      text:        (String) the terminal string        }\r\n\r\n`prettybnf.parse` returns a `grammar` node.\r\n\r\nExample\r\n-------\r\n\r\nConsider the following grammar, which you might have saved in the file `g.bnf`:\r\n\r\n    <list>  ::=  \"<\" <items> \">\"               ;\r\n    <items> ::=  <items> \" \" <item> | <item>   ;\r\n    <item>  ::=  \"foo\" | \"bar\" | \"baz\"         ;\r\n\r\nTo read this grammar from the file, parse it, and print the AST, you might do\r\nthe following:\r\n\r\n    // Node.js specific:\r\n    var prettybnf = require('prettybnf'), fs = require('fs');\r\n    var g = fs.readFileSync('g.bnf', 'utf8');\r\n\r\n    // The grammar is stored in the string g\r\n    var ast = prettybnf.parse(g);\r\n    console.log(ast);\r\n\r\nThis will print out the AST for the above grammar, which looks like\r\n\r\n    { type: 'grammar',\r\n      productions:\r\n       [ { type: 'production',\r\n           lhs: { type: 'nonterminal', text: 'list' },\r\n           rhs:\r\n            [ { type: 'expression',\r\n                terms:\r\n                 [ { type: 'terminal', text: '<' },\r\n                   { type: 'nonterminal', text: 'items' },\r\n                   { type: 'terminal', text: '>' } ] } ] },\r\n         { type: 'production',\r\n           lhs: { type: 'nonterminal', text: 'items' },\r\n           rhs:\r\n            [ { type: 'expression',\r\n                terms:\r\n                 [ { type: 'nonterminal', text: 'items' },\r\n                   { type: 'terminal', text: ' ' },\r\n                   { type: 'nonterminal', text: 'item' } ] },\r\n              { type: 'expression',\r\n                terms: [ { type: 'nonterminal', text: 'item' } ] } ] },\r\n         { type: 'production',\r\n           lhs: { type: 'nonterminal', text: 'item' },\r\n           rhs:\r\n            [ { type: 'expression',\r\n                terms: [ { type: 'terminal', text: 'foo' } ] },\r\n              { type: 'expression',\r\n                terms: [ { type: 'terminal', text: 'bar' } ] },\r\n              { type: 'expression',\r\n                terms: [ { type: 'terminal', text: 'baz' } ] } ] } ] }\r\n\r\nYou could add another expression to the `<item>` production:\r\n\r\n    var item = ast.productions[2];\r\n    item.rhs.push({\r\n        type: 'expression',\r\n        terms: [{ type: 'terminal', text: 'hello' },\r\n                { type: 'nonterminal', text: 'list' }]\r\n    });\r\n\r\nNow print out the modified grammar:\r\n\r\n    var h = prettybnf.stringify(ast);\r\n    console.log(h);\r\n\r\nThe resulting grammar looks like\r\n\r\n    <list>  ::=  \"<\" <items> \">\";\r\n    <items> ::=  <items> \" \" <item> | <item>;\r\n    <item>  ::=  \"foo\" | \"bar\" | \"baz\" | \"hello\" <list>;\r\n\r\nFor a longer example, take a look at the file `prettybnf.bnf`, which defines\r\nthe grammar recognized by the parser itself.\r\n\r\nContributing\r\n------------\r\n\r\n- fork on [GitHub](https://github.com/dhconnelly/prettybnf)\r\n- write code in `prettybnf.js`\r\n- add unit tests to `test_prettybnf.js`\r\n- make sure all tests and linting pass: `npm test`\r\n- send me a pull request\r\n\r\nAuthor\r\n------\r\n\r\nWritten by Daniel Connelly <dhconnelly@gmail.com> (http://dhconnelly.com).\r\n\r\nLicense\r\n-------\r\n\r\nReleased under the 2-clause BSD license; see LICENSE for more details.\r\n"}