{"google":"","tagline":"a JavaScript library for working with BNF grammars","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"prettybnf\r\n=========\r\n\r\na JavaScript library for working with BNF grammars\r\n\r\nAbout\r\n-----\r\n\r\n`prettybnf` provides a parser for Backus-Naur Form grammars and a stringifier\r\nfor pretty-printing BNF abstract syntax trees.  It uses the traditional BNF\r\nsyntax as opposed to `yacc` syntax.\r\n\r\nGetting Started\r\n---------------\r\n\r\nYou can use `prettybnf` both in Node.js apps and in modern browsers.  Only\r\nbrowsers that implement ECMAScript 5.1 with strict mode are supported.  This\r\nincludes Chrome 13+, Firefox 4+, Safari 5.1+, IE 10+, and Opera 12+\r\n([source](http://kangax.github.com/es5-compat-table)).\r\n\r\nTo get the library:\r\n\r\n- in a Node.js app using `npm`: do `npm install prettybnf` and add\r\n  `var prettybnf = require('prettybnf')` to your scripts.\r\n- in a Node.js app, manually: put `prettybnf.js` somewhere and add\r\n  `var prettybnf = require('./path/to/prettybnf.js')` to your scripts.\r\n- in a browser app: put `prettybnf.js` somewhere and add the usual\r\n  `<script src=\"path/to/prettybnf.js\"></script>` tag to your HTML.  This will\r\n  create a global object named `prettybnf`.\r\n\r\nIf you're not using `npm` you can download the latest version of `prettybnf.js`\r\nfrom GitHub [here](https://github.com/dhconnelly/prettybnf/downloads).\r\n\r\nUsage\r\n-----\r\n\r\nThere are four top-level exports on the `prettybnf` object:\r\n\r\n- `prettybnf.version`: string defining your version of the library\r\n- `prettybnf.parse(grammar)`: parses a BNF string and returns the AST\r\n- `prettybnf.stringify(ast)`: serializes an AST to a BNF string\r\n- `prettybnf.Parser(grammar)`: internals of the parser for testing and hacking\r\n\r\nThe parser constructs an AST, composed of AST nodes, from a grammar.  Each node\r\nis an object with a `type` property that specifies the type of node. The node\r\ntypes, which correspond to the BNF syntax recognized by the parser, are as\r\nfollows:\r\n\r\n- `grammar`\r\n- `production`\r\n- `expression`\r\n- `nonterminal`\r\n- `terminal`\r\n\r\n`prettybnf.parse` returns a `grammar` node.\r\n\r\nEach node has other relevant properties, described as follows:\r\n\r\n- `grammar`:\r\n    + `productions`: an `Array` of `production` nodes.\r\n- `production`:\r\n    + `lhs`: a `nonterminal` node\r\n    + `rhs`: an `Array` of `expression` nodes\r\n- `expression`:\r\n    + `terms`: an `Array` of `terminal` or `nonterminal` nodes\r\n- `terminal`:\r\n    + `text`: the terminal `String`\r\n- `nonterminal`:\r\n    + `text`: a `String` specifying the name of the nonterminal\r\n\r\nThe BNF syntax recognized by the parser is defined in the file `prettybnf.bnf`,\r\nwhich is itself written in BNF.\r\n\r\nContributing\r\n------------\r\n\r\n- fork on [GitHub](https://github.com/dhconnelly/prettybnf)\r\n- make sure you have [Node.js](http://nodejs.org)\r\n- write code in `prettybnf.js`\r\n- add unit tests to `test_prettybnf.js`\r\n- make sure all tests pass and everything passes `jshint`: `npm test`\r\n- send me a pull request\r\n\r\nAuthor\r\n------\r\n\r\nWritten by Daniel Connelly <dhconnelly@gmail.com> (http://dhconnelly.com).\r\n\r\nLicense\r\n-------\r\n\r\nReleased under the 2-clause BSD license; see LICENSE for more details.\r\n","name":"prettybnf"}